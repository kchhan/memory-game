{"version":3,"sources":["components/Header.js","components/CardInstance.js","components/GameContainer.js","App.js","serviceWorker.js","index.js"],"names":["Header","title","rules","currentScore","bestScore","className","CardInstance","cardData","updateCardCI","onClick","src","image","alt","country","GameContainer","data","updateCard","updateCardGC","card","map","key","id","App","useState","setData","setCurrentScore","setBestScore","useEffect","fetch","headers","Accept","then","res","json","jsonData","shuffle","temporaryValue","randomIndex","newData","currentIndex","length","Math","floor","random","clickedCard","clicked","newCurrentScore","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"mKAeeA,MAbf,YAA4D,IAA1CC,EAAyC,EAAzCA,MAAOC,EAAkC,EAAlCA,MAAOC,EAA2B,EAA3BA,aAAcC,EAAa,EAAbA,UAC5C,OACE,6BAASC,UAAU,UACjB,wBAAIA,UAAU,SAASJ,GACvB,uBAAGI,UAAU,SAASH,GACtB,yBAAKG,UAAU,UACb,yBAAKA,UAAU,iBAAf,kBAA+CF,GAC/C,yBAAKE,UAAU,cAAf,eAAyCD,MCSlCE,MAhBf,YAAmD,IAA3BC,EAA0B,EAA1BA,SAAUC,EAAgB,EAAhBA,aAMhC,OACE,yBAAKC,QANa,WAElBD,EADgBD,IAKWF,UAAU,QACnC,yBAAKK,IAAKH,EAASI,MAAOC,IAAKL,EAASM,QAAU,SAClD,6BACE,wBAAIR,UAAU,WAAWE,EAASM,YCW3BC,MApBf,YAA8C,IAArBC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,WACvBC,EAAe,SAACC,GACpBF,EAAWE,IAGb,OACE,6BAASb,UAAU,kBAChBU,EAAKI,KAAI,SAACZ,GACT,OACE,kBAAC,EAAD,CACEa,IAAKb,EAASc,GACdd,SAAUA,EACVC,aAAcS,S,KCwFXK,MAjGf,WAAgB,IAAD,EACWC,mBAAS,IADpB,mBACNR,EADM,KACAS,EADA,OAE2BD,mBAAS,GAFpC,mBAENpB,EAFM,KAEQsB,EAFR,OAGqBF,mBAAS,GAH9B,mBAGNnB,EAHM,KAGKsB,EAHL,KAqBbC,qBAAU,WAdRC,MAAM,eAAgB,CACpBC,QAAS,CACP,eAAgB,mBAChBC,OAAQ,sBAGTC,MAAK,SAAUC,GACd,OAAOA,EAAIC,UAEZF,MAAK,SAAUG,GACdV,EAAQU,QAMX,IAEH,IAqCMC,EAAU,WAOd,IANA,IAEEC,EACAC,EAHIC,EAAUvB,EACZwB,EAAeD,EAAQE,OAKpB,IAAMD,GAEXF,EAAcI,KAAKC,MAAMD,KAAKE,SAAWJ,GAIzCH,EAAiBE,EAHjBC,GAAgB,GAIhBD,EAAQC,GAAgBD,EAAQD,GAChCC,EAAQD,GAAeD,EAEzB,OAAOE,GAGT,OACE,8BACE,kBAAC,EAAD,CACErC,MAAO,cACPC,MACE,2EAEFC,aAAcA,EACdC,UAAWA,IAEb,kBAAC,EAAD,CAAeW,KAAMA,EAAMC,WAnEV,SAAC4B,GACpB,IAAM1B,EAAO0B,EAGb,GAAI7B,EAAKG,EAAKG,GAAK,GAAGwB,QAAS,CAI7BpB,EAAgB,GAEhB,IAAMa,EAAUvB,EAOhB,OANAuB,EAAQnB,KAAI,SAACD,GACX,OAAQA,EAAK2B,SAAU,KAEzBrB,EAAQc,QAERH,IAIA,IAAMG,EAAUvB,EAChBuB,EAAQpB,EAAKG,GAAK,GAAGwB,SAAU,EAC/BrB,EAAQc,GAER,IAAMQ,EAAkB3C,EAAe,EAQvC,OAPAsB,EAAgBqB,GAEZA,EAAkB1C,GACpBsB,EAAaoB,QAGfX,SClDcY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5B,MAAK,SAAA6B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.8e7971c7.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Header({ title, rules, currentScore, bestScore }) {\n  return (\n    <section className=\"header\">\n      <h1 className='title'>{title}</h1>\n      <p className='rules'>{rules}</p>\n      <div className='scores'>\n        <div className='current-score'>Current Score: {currentScore}</div>\n        <div className='best-score'>Best Score: {bestScore}</div>\n      </div>\n    </section>\n  );\n}\n\nexport default Header;\n","import React from 'react';\n\nfunction CardInstance({ cardData, updateCardCI }) {\n  const handleClick = () => {\n    const newCard = cardData;\n    updateCardCI(newCard);\n  };\n\n  return (\n    <div onClick={handleClick} className='card'>\n      <img src={cardData.image} alt={cardData.country + 'flag'} />\n      <div>\n        <h3 className='country'>{cardData.country}</h3>\n      </div>\n    </div>\n  );\n}\n\nexport default CardInstance;\n\n// find out how i can pass the props of a clicked card up too app.js and then change the state using set state there","import React from 'react';\nimport CardInstance from './CardInstance';\n\nfunction GameContainer({ data, updateCard }) {\n  const updateCardGC = (card) => {\n    updateCard(card);\n  };\n\n  return (\n    <section className='game-container'>\n      {data.map((cardData) => {\n        return (\n          <CardInstance\n            key={cardData.id}\n            cardData={cardData}\n            updateCardCI={updateCardGC}\n          />\n        );\n      })}\n    </section>\n  );\n}\n\nexport default GameContainer;\n","import React, { useState, useEffect } from 'react';\nimport Header from './components/Header';\nimport GameContainer from './components/GameContainer';\n\nimport './style.css';\n\nfunction App() {\n  const [data, setData] = useState([]);\n  const [currentScore, setCurrentScore] = useState(0);\n  const [bestScore, setBestScore] = useState(0);\n\n  // uses javascript fetch to retrieve json data from public directory\n  const getData = () => {\n    fetch('./flags.json', {\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json',\n      },\n    })\n      .then(function (res) {\n        return res.json();\n      })\n      .then(function (jsonData) {\n        setData(jsonData);\n      });\n  };\n\n  useEffect(() => {\n    getData();\n  }, []);\n\n  const handleChange = (clickedCard) => {\n    const card = clickedCard;\n\n    // checks value of card if already clicked or not\n    if (data[card.id - 1].clicked) {\n      // card.clicked is already true. end current game\n\n      // reset current score\n      setCurrentScore(0);\n      // reset all cards so clicked is false\n      const newData = data;\n      newData.map((card) => {\n        return (card.clicked = false);\n      });\n      setData(newData);\n      // shuffle grid\n      shuffle();\n      return;\n    } else {\n      // card has not been clicked yet. continue\n      const newData = data;\n      newData[card.id - 1].clicked = true;\n      setData(newData);\n      // increase score\n      const newCurrentScore = currentScore + 1;\n      setCurrentScore(newCurrentScore);\n      // set new best score if applies\n      if (newCurrentScore > bestScore) {\n        setBestScore(newCurrentScore);\n      }\n      // shuffle grid\n      shuffle();\n      return;\n    }\n  };\n\n  // fisher-yates shuffle algorithm\n  const shuffle = () => {\n    const newData = data;\n    let currentIndex = newData.length,\n      temporaryValue,\n      randomIndex;\n\n    // while there remail elements to shuffle\n    while (0 !== currentIndex) {\n      // pick a remaining element\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n\n      // swap it with the current element\n      temporaryValue = newData[currentIndex];\n      newData[currentIndex] = newData[randomIndex];\n      newData[randomIndex] = temporaryValue;\n    }\n    return newData;\n  };\n\n  return (\n    <main>\n      <Header\n        title={'Memory Game'}\n        rules={\n          'Get points by clicking on a flag but do not click on any more than once!'\n        }\n        currentScore={currentScore}\n        bestScore={bestScore}\n      />\n      <GameContainer data={data} updateCard={handleChange} />\n    </main>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}